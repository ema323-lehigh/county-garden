# # # # # WELCOME TO COUNTY GARDEN INSURANCE # # # # #
------- Emily Asadoorian | CSE-341 Spring 2021 -------

Hello! This, as you well know, is my course project submission for our databases course. When you run the included jar file, you will be greeted by a menu that prompts for Oracle username and password before entering the nitty-gritty of the database. You can choose to interact as either an agent, an adjuster, or a customer, with the various business functions available to each.


Agents can:
- sign up new customers
- add new policies for existing customers
- generate invoices for existing policies

Adjusters can:
- assign claims to other adjusters (or themselves)
- manage claims
    - adjuster assignments
    - servicing contractors
    - payments to be made

Customers can:
- update their contact information
    - phone(s)
    - address
- add or remove dependents
- add or remove policy-covered items
- make claims against their policies
- pay their premiums


Key tenets:
- each customer has one (dedicated) agent ALWAYS
- meanwhile, claims may be managed by multiple adjusters
- all policies must be held, claims made but not immediately managed, etc.
- no employee can be both an agent and an adjuster
- contractors may service as many or as few claims
- accordingly, not all claims are serviced
- we don't care about employees' information
- bills are expected to be paid, resulting in an initially null payment_type field
- unpaid policy premiums result in customers getting booted
- every claim is made against some individual policy, but not all policies have claims
- one invoice can make payments against multiple policies (? bundles)
- as policies can be new or cancelled, they do not have mandatory invoices
- a policy can only be held by one customer, no matter how many are insured
- likewise, a claim may only be made by a single customer
- dependents may NOT[1] belong to multiple customers (ex. divorce) & no floating
- a dependent is identified both by their name and their relationship to the customer
- at the moment, the design is open to non-insurance-oriented employees, just in case
- each payment goes towards one and only one claim, identified by its payment number on that claim
- quoted prices need not always be available, so they will be null at first
- all invoices are paid in full, while payments may be partial on claims
- consider: should records (besides ex. dependents, contact info) remain after their controller disappears?
- as it happens we can insure our contractors' stuff (by way of same address & owner's name)
- zipcodes are stored as numbers, phone #s as strings...if i get in the mood to drop those tables and re-up, that strange decision may not stand
- backout mechanism can't be modularized since it requires breaking out of a switch and a while, and an extra method scope would only make that worse
- one can advance through data insertion prompts that they didn't want by giving EOF (Ctrl-D)

Helpful links:
- https://www.progressive.com/answers/how-to-file-an-auto-claim/
- https://www.ehealthinsurance.com/resources/individual-and-family/can-added-dependent-health-insurance-plan [1]

Data was not sourced from anywhere in particular, save perhaps a few searches to jog my recollection of unique first names. I didn't make my own data out of principle against using premade sources - it's just fun to create these little stories about people this way!
