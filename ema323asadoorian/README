# # # # # WELCOME TO COUNTY GARDEN INSURANCE # # # # #
------- Emily Asadoorian | CSE-341 Spring 2021 -------

Hello! This, as you well know, is my course project submission for our databases course. When you run the included jar file, you will be greeted by a menu that prompts for Oracle username and password before entering the nitty-gritty of the database. You can choose to interact as either an agent, an adjuster, or a customer, with the various business functions available to each.


Agents can:
- sign up new customers - DONE
- add new policies for existing customers - DONE
- generate invoices for existing policies - DONE

Adjusters can:
- assign claims to other adjusters (or themselves) - DONE
- manage claims - DONE
    - adjuster assignments - DONE
    - servicing contractors - DONE
    - payments to be made - DONE

Customers can:
- update their contact information - DONE
    - phone(s) - DONE
    - address - DONE
- add or remove dependents
- add or remove policy-covered items
- make claims against their policies - DONE
- pay their premiums - DONE
- cancel policies - DONE


Here are some notes/tenets I made while refining the design:
- Each customer has one (dedicated) agent ALWAYS.
- Meanwhile, claims may be managed by multiple adjusters.
- All policies must be held, but claims will not be immediately managed upon creation.
- No employee can be both an agent and an adjuster (skilled professionals !).
- Contractors may service as many or as few claims as the adjusters desire.
- Accordingly, not all claims are serviced at all.
- Employees' information is not modeled/tracked beyond a couple of special attributes.
- Bills are expected to be paid in future, so the payment_type field may be null.
- Unpaid policy premiums should result in customers getting booted (!).
- Every claim is made against some individual policy, but not all policies have claims.
- One invoice can make payments against multiple policies, so the customer just pays their balance.
- As policies can be new or cancelled, they do not have mandatory invoices.
- A policy can only be held by one customer, no matter how many are insured.
- Likewise, a claim may only be made by a single customer, no matter who was in the altercation.
- In general, dependents may NOT[1] belong to multiple customers (ex. divorce) & no floating between customers,
  but a dependent is identified both by their name and their relationship to the customer, so that is left abstract.
- The design is open to the addition of non-agent/adjuster employees through the employee table system.
- Each company payment goes towards one and only one claim, identified by its payment number on that claim.
- Quoted prices might not always be available, so they will be null at first.
- All invoices are paid in full, while payments may be partial on claims.
- Records for cancelled policies are only maintained as long as the customer is doing business with us.
- As it happens, we can insure our contractors' stuff, by way of the same address fields.
- One peculiar choice: zipcodes are stored as numbers, but phone numbers are strings. It's just the way it is.


Helpful links:
- https://www.progressive.com/answers/how-to-file-an-auto-claim/
- https://www.ehealthinsurance.com/resources/individual-and-family/can-added-dependent-health-insurance-plan [1]

Data was not sourced from anywhere in particular, save perhaps a few searches to jog my recollection of unique first names. I didn't make my own data out of principle against using premade sources, it's just fun to create these little stories about people this way!


Some "pleas guilty":
- Not all of my lines of divider dashes may be perfectly placed. The interest of efficiency in heavy testing doesn't mix well with catching every single one of those, and it's a price I'm somewhat willing to pay!
- As yet, I haven't had complete success with "trapping" a Ctrl-D signal such that it doesn't travel any farther up the chain than the current input request. So, I tried, but perhaps don't use it please? Something like that, while important as a feature of quality, had to get left behind, and I think that's okay.
- Along those lines, it's not quite feasible to back out of multiple switch and while scopes from within a function that brings yet its own scope, so the back menu option has to be manually inserted into most menus. Accordingly, it cannot appear in lists for data choice, so users must simply quit out completely at that stage, unfortunately.
- I am simply relying on random six-digit numbers to not overlap with each other within tables. Is this a bad idea? Probably. Does it work fine for this project? Absolutely. I chose to save the time of grabbing all current IDs from whichever table and searching them for a duplicate, which hopefully will not come back to bite me when you test...
